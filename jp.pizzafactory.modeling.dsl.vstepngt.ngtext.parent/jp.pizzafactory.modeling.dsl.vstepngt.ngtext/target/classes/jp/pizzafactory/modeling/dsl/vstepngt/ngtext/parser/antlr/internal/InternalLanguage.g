/*
 * generated by Xtext 2.10.0
 */
grammar InternalLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package jp.pizzafactory.modeling.dsl.vstepngt.ngtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.pizzafactory.modeling.dsl.vstepngt.ngtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.pizzafactory.modeling.dsl.vstepngt.ngtext.services.LanguageGrammarAccess;

}

@parser::members {

 	private LanguageGrammarAccess grammarAccess;

    public InternalLanguageParser(TokenStream input, LanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "WorkspaceRoot";
   	}

   	@Override
   	protected LanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorkspaceRoot
entryRuleWorkspaceRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkspaceRootRule()); }
	iv_ruleWorkspaceRoot=ruleWorkspaceRoot
	{ $current=$iv_ruleWorkspaceRoot.current; }
	EOF;

// Rule WorkspaceRoot
ruleWorkspaceRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkspaceRootAccess().getElementsWorkspaceElementParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleWorkspaceElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkspaceRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkspaceRootAccess().getElementsWorkspaceElementParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleWorkspaceElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkspaceRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleWorkspaceElement
entryRuleWorkspaceElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkspaceElementRule()); }
	iv_ruleWorkspaceElement=ruleWorkspaceElement
	{ $current=$iv_ruleWorkspaceElement.current; }
	EOF;

// Rule WorkspaceElement
ruleWorkspaceElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWorkspaceElementAccess().getContainerParserRuleCall_0());
		}
		this_Container_0=ruleContainer
		{
			$current = $this_Container_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWorkspaceElementAccess().getAbstractionParserRuleCall_1());
		}
		this_Abstraction_1=ruleAbstraction
		{
			$current = $this_Abstraction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWorkspaceElementAccess().getAggregationParserRuleCall_2());
		}
		this_Aggregation_2=ruleAggregation
		{
			$current = $this_Aggregation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWorkspaceElementAccess().getTestableParserRuleCall_3());
		}
		this_Testable_3=ruleTestable
		{
			$current = $this_Testable_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWorkspaceElementAccess().getTestAssociationParserRuleCall_4());
		}
		this_TestAssociation_4=ruleTestAssociation
		{
			$current = $this_TestAssociation_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContainerAccess().getContainerAction_0(),
					$current);
			}
		)
		otherlv_1='Container'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainerAccess().getContainerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getNameIdentifiableParserRuleCall_2_0());
				}
				lv_name_2_0=ruleIdentifiable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='title'
			{
				newLeafNode(otherlv_4, grammarAccess.getContainerAccess().getTitleKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerAccess().getTitleTitleParserRuleCall_4_1_0());
					}
					lv_title_5_0=ruleTitle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerRule());
						}
						set(
							$current,
							"title",
							lv_title_5_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Title");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerAccess().getElementsWorkspaceElementParserRuleCall_5_0_0());
					}
					lv_elements_6_0=ruleWorkspaceElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerRule());
						}
						add(
							$current,
							"elements",
							lv_elements_6_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerAccess().getElementsWorkspaceElementParserRuleCall_5_1_0());
					}
					lv_elements_7_0=ruleWorkspaceElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerRule());
						}
						add(
							$current,
							"elements",
							lv_elements_7_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceElement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAbstraction
entryRuleAbstraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractionRule()); }
	iv_ruleAbstraction=ruleAbstraction
	{ $current=$iv_ruleAbstraction.current; }
	EOF;

// Rule Abstraction
ruleAbstraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Abstraction'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbstractionAccess().getAbstractionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractionAccess().getNameIdentifiableParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifiable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAbstractionAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='superClass'
		{
			newLeafNode(otherlv_3, grammarAccess.getAbstractionAccess().getSuperClassKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbstractionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getAbstractionAccess().getSuperClassTestableCrossReference_4_0());
				}
			)
		)
		otherlv_5='subClass'
		{
			newLeafNode(otherlv_5, grammarAccess.getAbstractionAccess().getSubClassKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbstractionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getAbstractionAccess().getSubClassTestableCrossReference_6_0());
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAbstractionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleAggregation
entryRuleAggregation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregationRule()); }
	iv_ruleAggregation=ruleAggregation
	{ $current=$iv_ruleAggregation.current; }
	EOF;

// Rule Aggregation
ruleAggregation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAggregationAccess().getAggregationAction_0(),
					$current);
			}
		)
		otherlv_1='Aggregation'
		{
			newLeafNode(otherlv_1, grammarAccess.getAggregationAccess().getAggregationKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregationAccess().getNameIdentifiableParserRuleCall_2_0());
				}
				lv_name_2_0=ruleIdentifiable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregationRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getAggregationAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='stereotype'
			{
				newLeafNode(otherlv_4, grammarAccess.getAggregationAccess().getStereotypeKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAggregationAccess().getStereotypeStereotypeParserRuleCall_4_1_0());
					}
					lv_stereotype_5_0=ruleStereotype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAggregationRule());
						}
						set(
							$current,
							"stereotype",
							lv_stereotype_5_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Stereotype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='owner'
		{
			newLeafNode(otherlv_6, grammarAccess.getAggregationAccess().getOwnerKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAggregationRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getAggregationAccess().getOwnerComponentCrossReference_6_0());
				}
			)
		)
		otherlv_8='member'
		{
			newLeafNode(otherlv_8, grammarAccess.getAggregationAccess().getMemberKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAggregationRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getAggregationAccess().getMemberTestableCrossReference_8_0());
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getAggregationAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleTestable
entryRuleTestable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestableRule()); }
	iv_ruleTestable=ruleTestable
	{ $current=$iv_ruleTestable.current; }
	EOF;

// Rule Testable
ruleTestable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTestableAccess().getTestableAction_0(),
					$current);
			}
		)
		(
			(
				lv_isRoot_1_0='root'
				{
					newLeafNode(lv_isRoot_1_0, grammarAccess.getTestableAccess().getIsRootRootKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestableRule());
					}
					setWithLastConsumed($current, "isRoot", true, "root");
				}
			)
		)?
		otherlv_2='Testable'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestableAccess().getTestableKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestableAccess().getNameIdentifiableParserRuleCall_3_0());
				}
				lv_name_3_0=ruleIdentifiable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestableRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestableAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			otherlv_5='shortDescription'
			{
				newLeafNode(otherlv_5, grammarAccess.getTestableAccess().getShortDescriptionKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestableAccess().getShortDescriptionShortDescriptionParserRuleCall_5_1_0());
					}
					lv_shortDescription_6_0=ruleShortDescription
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestableRule());
						}
						set(
							$current,
							"shortDescription",
							lv_shortDescription_6_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.ShortDescription");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getTestableAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTestAssociation
entryRuleTestAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestAssociationRule()); }
	iv_ruleTestAssociation=ruleTestAssociation
	{ $current=$iv_ruleTestAssociation.current; }
	EOF;

// Rule TestAssociation
ruleTestAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TestAssociation'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestAssociationAccess().getTestAssociationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAssociationAccess().getNameIdentifiableParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifiable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestAssociationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestAssociationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='stereotype'
			{
				newLeafNode(otherlv_3, grammarAccess.getTestAssociationAccess().getStereotypeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestAssociationAccess().getStereotypeStereotypeParserRuleCall_3_1_0());
					}
					lv_stereotype_4_0=ruleStereotype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestAssociationRule());
						}
						set(
							$current,
							"stereotype",
							lv_stereotype_4_0,
							"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Stereotype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='type'
		{
			newLeafNode(otherlv_5, grammarAccess.getTestAssociationAccess().getTypeKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAssociationAccess().getTypeAssociationTypeEnumRuleCall_5_0());
				}
				lv_type_6_0=ruleAssociationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.AssociationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='source'
		{
			newLeafNode(otherlv_7, grammarAccess.getTestAssociationAccess().getSourceKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestAssociationRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getTestAssociationAccess().getSourceTestableCrossReference_7_0());
				}
			)
		)
		otherlv_9='target'
		{
			newLeafNode(otherlv_9, grammarAccess.getTestAssociationAccess().getTargetKeyword_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestAssociationRule());
					}
				}
				otherlv_10=RULE_ID
				{
					newLeafNode(otherlv_10, grammarAccess.getTestAssociationAccess().getTargetTestableCrossReference_9_0());
				}
			)
		)
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getTestAssociationAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleIdentifiable
entryRuleIdentifiable returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifiableRule()); }
	iv_ruleIdentifiable=ruleIdentifiable
	{ $current=$iv_ruleIdentifiable.current.getText(); }
	EOF;

// Rule Identifiable
ruleIdentifiable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getIdentifiableAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleStereotype
entryRuleStereotype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStereotypeRule()); }
	iv_ruleStereotype=ruleStereotype
	{ $current=$iv_ruleStereotype.current.getText(); }
	EOF;

// Rule Stereotype
ruleStereotype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStereotypeAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleShortDescription
entryRuleShortDescription returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShortDescriptionRule()); }
	iv_ruleShortDescription=ruleShortDescription
	{ $current=$iv_ruleShortDescription.current.getText(); }
	EOF;

// Rule ShortDescription
ruleShortDescription returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getShortDescriptionAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleTitle
entryRuleTitle returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current.getText(); }
	EOF;

// Rule Title
ruleTitle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getTitleAccess().getSTRINGTerminalRuleCall());
	}
;

// Rule AssociationType
ruleAssociationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='COMBINATION'
			{
				$current = grammarAccess.getAssociationTypeAccess().getCOMBINATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssociationTypeAccess().getCOMBINATIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FRAMING'
			{
				$current = grammarAccess.getAssociationTypeAccess().getFRAMINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssociationTypeAccess().getFRAMINGEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SEQUENCE'
			{
				$current = grammarAccess.getAssociationTypeAccess().getSEQUENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssociationTypeAccess().getSEQUENCEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
