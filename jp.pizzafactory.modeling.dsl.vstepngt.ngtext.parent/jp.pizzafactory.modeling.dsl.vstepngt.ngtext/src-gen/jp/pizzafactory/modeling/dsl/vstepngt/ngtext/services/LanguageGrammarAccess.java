/*
 * generated by Xtext 2.10.0
 */
package jp.pizzafactory.modeling.dsl.vstepngt.ngtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorkspaceRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsWorkspaceElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsWorkspaceElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//WorkspaceRoot Container:
		//	elements+=WorkspaceElement elements+=WorkspaceElement*
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=WorkspaceElement elements+=WorkspaceElement*
		public Group getGroup() { return cGroup; }
		
		//elements+=WorkspaceElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//WorkspaceElement
		public RuleCall getElementsWorkspaceElementParserRuleCall_0_0() { return cElementsWorkspaceElementParserRuleCall_0_0; }
		
		//elements+=WorkspaceElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//WorkspaceElement
		public RuleCall getElementsWorkspaceElementParserRuleCall_1_0() { return cElementsWorkspaceElementParserRuleCall_1_0; }
	}
	public class WorkspaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.WorkspaceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAggregationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTestAssociationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//WorkspaceElement:
		//	Container | Abstraction | Aggregation | Testable | TestAssociation;
		@Override public ParserRule getRule() { return rule; }
		
		//Container | Abstraction | Aggregation | Testable | TestAssociation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Container
		public RuleCall getContainerParserRuleCall_0() { return cContainerParserRuleCall_0; }
		
		//Abstraction
		public RuleCall getAbstractionParserRuleCall_1() { return cAbstractionParserRuleCall_1; }
		
		//Aggregation
		public RuleCall getAggregationParserRuleCall_2() { return cAggregationParserRuleCall_2; }
		
		//Testable
		public RuleCall getTestableParserRuleCall_3() { return cTestableParserRuleCall_3; }
		
		//TestAssociation
		public RuleCall getTestAssociationParserRuleCall_4() { return cTestAssociationParserRuleCall_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Component:
		//	Container | Testable;
		@Override public ParserRule getRule() { return rule; }
		
		//Container | Testable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Container
		public RuleCall getContainerParserRuleCall_0() { return cContainerParserRuleCall_0; }
		
		//Testable
		public RuleCall getTestableParserRuleCall_1() { return cTestableParserRuleCall_1; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifiableParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTitleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTitleTitleParserRuleCall_4_1_0 = (RuleCall)cTitleAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsWorkspaceElementParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsWorkspaceElementParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Container:
		//	{Container}
		//	'Container' name=Identifiable?
		//	'{' ('title' title=Title)? (elements+=WorkspaceElement elements+=WorkspaceElement*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Container} 'Container' name=Identifiable? '{' ('title' title=Title)? (elements+=WorkspaceElement
		//elements+=WorkspaceElement*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Container}
		public Action getContainerAction_0() { return cContainerAction_0; }
		
		//'Container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//name=Identifiable?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Identifiable
		public RuleCall getNameIdentifiableParserRuleCall_2_0() { return cNameIdentifiableParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('title' title=Title)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'title'
		public Keyword getTitleKeyword_4_0() { return cTitleKeyword_4_0; }
		
		//title=Title
		public Assignment getTitleAssignment_4_1() { return cTitleAssignment_4_1; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_4_1_0() { return cTitleTitleParserRuleCall_4_1_0; }
		
		//(elements+=WorkspaceElement elements+=WorkspaceElement*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//elements+=WorkspaceElement
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }
		
		//WorkspaceElement
		public RuleCall getElementsWorkspaceElementParserRuleCall_5_0_0() { return cElementsWorkspaceElementParserRuleCall_5_0_0; }
		
		//elements+=WorkspaceElement*
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }
		
		//WorkspaceElement
		public RuleCall getElementsWorkspaceElementParserRuleCall_5_1_0() { return cElementsWorkspaceElementParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Abstraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifiableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSuperClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuperClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuperClassTestableCrossReference_4_0 = (CrossReference)cSuperClassAssignment_4.eContents().get(0);
		private final RuleCall cSuperClassTestableIDTerminalRuleCall_4_0_1 = (RuleCall)cSuperClassTestableCrossReference_4_0.eContents().get(1);
		private final Keyword cSubClassKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSubClassTestableCrossReference_6_0 = (CrossReference)cSubClassAssignment_6.eContents().get(0);
		private final RuleCall cSubClassTestableIDTerminalRuleCall_6_0_1 = (RuleCall)cSubClassTestableCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Abstraction:
		//	'Abstraction' name=Identifiable?
		//	'{'
		//	'superClass' superClass=[Testable]
		//	'subClass' subClass=[Testable]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Abstraction' name=Identifiable? '{' 'superClass' superClass=[Testable] 'subClass' subClass=[Testable] '}'
		public Group getGroup() { return cGroup; }
		
		//'Abstraction'
		public Keyword getAbstractionKeyword_0() { return cAbstractionKeyword_0; }
		
		//name=Identifiable?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifiable
		public RuleCall getNameIdentifiableParserRuleCall_1_0() { return cNameIdentifiableParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'superClass'
		public Keyword getSuperClassKeyword_3() { return cSuperClassKeyword_3; }
		
		//superClass=[Testable]
		public Assignment getSuperClassAssignment_4() { return cSuperClassAssignment_4; }
		
		//[Testable]
		public CrossReference getSuperClassTestableCrossReference_4_0() { return cSuperClassTestableCrossReference_4_0; }
		
		//ID
		public RuleCall getSuperClassTestableIDTerminalRuleCall_4_0_1() { return cSuperClassTestableIDTerminalRuleCall_4_0_1; }
		
		//'subClass'
		public Keyword getSubClassKeyword_5() { return cSubClassKeyword_5; }
		
		//subClass=[Testable]
		public Assignment getSubClassAssignment_6() { return cSubClassAssignment_6; }
		
		//[Testable]
		public CrossReference getSubClassTestableCrossReference_6_0() { return cSubClassTestableCrossReference_6_0; }
		
		//ID
		public RuleCall getSubClassTestableIDTerminalRuleCall_6_0_1() { return cSubClassTestableIDTerminalRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Aggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAggregationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifiableParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStereotypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStereotypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStereotypeStereotypeParserRuleCall_4_1_0 = (RuleCall)cStereotypeAssignment_4_1.eContents().get(0);
		private final Keyword cOwnerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cOwnerComponentCrossReference_6_0 = (CrossReference)cOwnerAssignment_6.eContents().get(0);
		private final RuleCall cOwnerComponentIDTerminalRuleCall_6_0_1 = (RuleCall)cOwnerComponentCrossReference_6_0.eContents().get(1);
		private final Keyword cMemberKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMemberAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cMemberTestableCrossReference_8_0 = (CrossReference)cMemberAssignment_8.eContents().get(0);
		private final RuleCall cMemberTestableIDTerminalRuleCall_8_0_1 = (RuleCall)cMemberTestableCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Aggregation:
		//	{Aggregation}
		//	'Aggregation' name=Identifiable?
		//	'{' ('stereotype' stereotype=Stereotype)?
		//	'owner' owner=[Component]
		//	'member' member=[Testable]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Aggregation} 'Aggregation' name=Identifiable? '{' ('stereotype' stereotype=Stereotype)? 'owner' owner=[Component]
		//'member' member=[Testable] '}'
		public Group getGroup() { return cGroup; }
		
		//{Aggregation}
		public Action getAggregationAction_0() { return cAggregationAction_0; }
		
		//'Aggregation'
		public Keyword getAggregationKeyword_1() { return cAggregationKeyword_1; }
		
		//name=Identifiable?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Identifiable
		public RuleCall getNameIdentifiableParserRuleCall_2_0() { return cNameIdentifiableParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('stereotype' stereotype=Stereotype)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'stereotype'
		public Keyword getStereotypeKeyword_4_0() { return cStereotypeKeyword_4_0; }
		
		//stereotype=Stereotype
		public Assignment getStereotypeAssignment_4_1() { return cStereotypeAssignment_4_1; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_4_1_0() { return cStereotypeStereotypeParserRuleCall_4_1_0; }
		
		//'owner'
		public Keyword getOwnerKeyword_5() { return cOwnerKeyword_5; }
		
		//owner=[Component]
		public Assignment getOwnerAssignment_6() { return cOwnerAssignment_6; }
		
		//[Component]
		public CrossReference getOwnerComponentCrossReference_6_0() { return cOwnerComponentCrossReference_6_0; }
		
		//ID
		public RuleCall getOwnerComponentIDTerminalRuleCall_6_0_1() { return cOwnerComponentIDTerminalRuleCall_6_0_1; }
		
		//'member'
		public Keyword getMemberKeyword_7() { return cMemberKeyword_7; }
		
		//member=[Testable]
		public Assignment getMemberAssignment_8() { return cMemberAssignment_8; }
		
		//[Testable]
		public CrossReference getMemberTestableCrossReference_8_0() { return cMemberTestableCrossReference_8_0; }
		
		//ID
		public RuleCall getMemberTestableIDTerminalRuleCall_8_0_1() { return cMemberTestableIDTerminalRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class TestableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Testable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsRootRootKeyword_1_0 = (Keyword)cIsRootAssignment_1.eContents().get(0);
		private final Keyword cTestableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentifiableParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cShortDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cShortDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cShortDescriptionShortDescriptionParserRuleCall_5_1_0 = (RuleCall)cShortDescriptionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Testable:
		//	{Testable} isRoot?='root'?
		//	'Testable' name=Identifiable?
		//	'{' ('shortDescription' shortDescription=ShortDescription)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Testable} isRoot?='root'? 'Testable' name=Identifiable? '{' ('shortDescription' shortDescription=ShortDescription)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Testable}
		public Action getTestableAction_0() { return cTestableAction_0; }
		
		//isRoot?='root'?
		public Assignment getIsRootAssignment_1() { return cIsRootAssignment_1; }
		
		//'root'
		public Keyword getIsRootRootKeyword_1_0() { return cIsRootRootKeyword_1_0; }
		
		//'Testable'
		public Keyword getTestableKeyword_2() { return cTestableKeyword_2; }
		
		//name=Identifiable?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Identifiable
		public RuleCall getNameIdentifiableParserRuleCall_3_0() { return cNameIdentifiableParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('shortDescription' shortDescription=ShortDescription)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'shortDescription'
		public Keyword getShortDescriptionKeyword_5_0() { return cShortDescriptionKeyword_5_0; }
		
		//shortDescription=ShortDescription
		public Assignment getShortDescriptionAssignment_5_1() { return cShortDescriptionAssignment_5_1; }
		
		//ShortDescription
		public RuleCall getShortDescriptionShortDescriptionParserRuleCall_5_1_0() { return cShortDescriptionShortDescriptionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TestAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.TestAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifiableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStereotypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStereotypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStereotypeStereotypeParserRuleCall_3_1_0 = (RuleCall)cStereotypeAssignment_3_1.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeAssociationTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSourceTestableCrossReference_7_0 = (CrossReference)cSourceAssignment_7.eContents().get(0);
		private final RuleCall cSourceTestableIDTerminalRuleCall_7_0_1 = (RuleCall)cSourceTestableCrossReference_7_0.eContents().get(1);
		private final Keyword cTargetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetTestableCrossReference_9_0 = (CrossReference)cTargetAssignment_9.eContents().get(0);
		private final RuleCall cTargetTestableIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetTestableCrossReference_9_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//TestAssociation:
		//	'TestAssociation' name=Identifiable?
		//	'{' ('stereotype' stereotype=Stereotype)?
		//	'type' type=AssociationType
		//	'source' source=[Testable]
		//	'target' target=[Testable]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TestAssociation' name=Identifiable? '{' ('stereotype' stereotype=Stereotype)? 'type' type=AssociationType 'source'
		//source=[Testable] 'target' target=[Testable] '}'
		public Group getGroup() { return cGroup; }
		
		//'TestAssociation'
		public Keyword getTestAssociationKeyword_0() { return cTestAssociationKeyword_0; }
		
		//name=Identifiable?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifiable
		public RuleCall getNameIdentifiableParserRuleCall_1_0() { return cNameIdentifiableParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('stereotype' stereotype=Stereotype)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'stereotype'
		public Keyword getStereotypeKeyword_3_0() { return cStereotypeKeyword_3_0; }
		
		//stereotype=Stereotype
		public Assignment getStereotypeAssignment_3_1() { return cStereotypeAssignment_3_1; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_3_1_0() { return cStereotypeStereotypeParserRuleCall_3_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=AssociationType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//AssociationType
		public RuleCall getTypeAssociationTypeEnumRuleCall_5_0() { return cTypeAssociationTypeEnumRuleCall_5_0; }
		
		//'source'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//source=[Testable]
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }
		
		//[Testable]
		public CrossReference getSourceTestableCrossReference_7_0() { return cSourceTestableCrossReference_7_0; }
		
		//ID
		public RuleCall getSourceTestableIDTerminalRuleCall_7_0_1() { return cSourceTestableIDTerminalRuleCall_7_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_8() { return cTargetKeyword_8; }
		
		//target=[Testable]
		public Assignment getTargetAssignment_9() { return cTargetAssignment_9; }
		
		//[Testable]
		public CrossReference getTargetTestableCrossReference_9_0() { return cTargetTestableCrossReference_9_0; }
		
		//ID
		public RuleCall getTargetTestableIDTerminalRuleCall_9_0_1() { return cTargetTestableIDTerminalRuleCall_9_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class IdentifiableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Identifiable");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Identifiable Identifiable:
		//	ID
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class StereotypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Stereotype");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Stereotype Stereotype:
		//	STRING
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class ShortDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.ShortDescription");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ShortDescription ShortDescription:
		//	STRING
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.Title");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Title:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class AssociationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language.AssociationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMBINATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMBINATIONCOMBINATIONKeyword_0_0 = (Keyword)cCOMBINATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFRAMINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFRAMINGFRAMINGKeyword_1_0 = (Keyword)cFRAMINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSEQUENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSEQUENCESEQUENCEKeyword_2_0 = (Keyword)cSEQUENCEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AssociationType:
		//	COMBINATION | FRAMING | SEQUENCE;
		public EnumRule getRule() { return rule; }
		
		//COMBINATION | FRAMING | SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COMBINATION
		public EnumLiteralDeclaration getCOMBINATIONEnumLiteralDeclaration_0() { return cCOMBINATIONEnumLiteralDeclaration_0; }
		
		//'COMBINATION'
		public Keyword getCOMBINATIONCOMBINATIONKeyword_0_0() { return cCOMBINATIONCOMBINATIONKeyword_0_0; }
		
		//FRAMING
		public EnumLiteralDeclaration getFRAMINGEnumLiteralDeclaration_1() { return cFRAMINGEnumLiteralDeclaration_1; }
		
		//'FRAMING'
		public Keyword getFRAMINGFRAMINGKeyword_1_0() { return cFRAMINGFRAMINGKeyword_1_0; }
		
		//SEQUENCE
		public EnumLiteralDeclaration getSEQUENCEEnumLiteralDeclaration_2() { return cSEQUENCEEnumLiteralDeclaration_2; }
		
		//'SEQUENCE'
		public Keyword getSEQUENCESEQUENCEKeyword_2_0() { return cSEQUENCESEQUENCEKeyword_2_0; }
	}
	
	private final WorkspaceRootElements pWorkspaceRoot;
	private final WorkspaceElementElements pWorkspaceElement;
	private final ComponentElements pComponent;
	private final ContainerElements pContainer;
	private final AbstractionElements pAbstraction;
	private final AggregationElements pAggregation;
	private final TestableElements pTestable;
	private final TestAssociationElements pTestAssociation;
	private final IdentifiableElements pIdentifiable;
	private final StereotypeElements pStereotype;
	private final ShortDescriptionElements pShortDescription;
	private final TitleElements pTitle;
	private final EBooleanElements pEBoolean;
	private final AssociationTypeElements eAssociationType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkspaceRoot = new WorkspaceRootElements();
		this.pWorkspaceElement = new WorkspaceElementElements();
		this.pComponent = new ComponentElements();
		this.pContainer = new ContainerElements();
		this.pAbstraction = new AbstractionElements();
		this.pAggregation = new AggregationElements();
		this.pTestable = new TestableElements();
		this.pTestAssociation = new TestAssociationElements();
		this.pIdentifiable = new IdentifiableElements();
		this.pStereotype = new StereotypeElements();
		this.pShortDescription = new ShortDescriptionElements();
		this.pTitle = new TitleElements();
		this.pEBoolean = new EBooleanElements();
		this.eAssociationType = new AssociationTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jp.pizzafactory.modeling.dsl.vstepngt.ngtext.Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WorkspaceRoot Container:
	//	elements+=WorkspaceElement elements+=WorkspaceElement*
	public WorkspaceRootElements getWorkspaceRootAccess() {
		return pWorkspaceRoot;
	}
	
	public ParserRule getWorkspaceRootRule() {
		return getWorkspaceRootAccess().getRule();
	}
	
	//WorkspaceElement:
	//	Container | Abstraction | Aggregation | Testable | TestAssociation;
	public WorkspaceElementElements getWorkspaceElementAccess() {
		return pWorkspaceElement;
	}
	
	public ParserRule getWorkspaceElementRule() {
		return getWorkspaceElementAccess().getRule();
	}
	
	//Component:
	//	Container | Testable;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Container:
	//	{Container}
	//	'Container' name=Identifiable?
	//	'{' ('title' title=Title)? (elements+=WorkspaceElement elements+=WorkspaceElement*)?
	//	'}';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Abstraction:
	//	'Abstraction' name=Identifiable?
	//	'{'
	//	'superClass' superClass=[Testable]
	//	'subClass' subClass=[Testable]
	//	'}';
	public AbstractionElements getAbstractionAccess() {
		return pAbstraction;
	}
	
	public ParserRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}
	
	//Aggregation:
	//	{Aggregation}
	//	'Aggregation' name=Identifiable?
	//	'{' ('stereotype' stereotype=Stereotype)?
	//	'owner' owner=[Component]
	//	'member' member=[Testable]
	//	'}';
	public AggregationElements getAggregationAccess() {
		return pAggregation;
	}
	
	public ParserRule getAggregationRule() {
		return getAggregationAccess().getRule();
	}
	
	//Testable:
	//	{Testable} isRoot?='root'?
	//	'Testable' name=Identifiable?
	//	'{' ('shortDescription' shortDescription=ShortDescription)?
	//	'}';
	public TestableElements getTestableAccess() {
		return pTestable;
	}
	
	public ParserRule getTestableRule() {
		return getTestableAccess().getRule();
	}
	
	//TestAssociation:
	//	'TestAssociation' name=Identifiable?
	//	'{' ('stereotype' stereotype=Stereotype)?
	//	'type' type=AssociationType
	//	'source' source=[Testable]
	//	'target' target=[Testable]
	//	'}';
	public TestAssociationElements getTestAssociationAccess() {
		return pTestAssociation;
	}
	
	public ParserRule getTestAssociationRule() {
		return getTestAssociationAccess().getRule();
	}
	
	//Identifiable Identifiable:
	//	ID
	public IdentifiableElements getIdentifiableAccess() {
		return pIdentifiable;
	}
	
	public ParserRule getIdentifiableRule() {
		return getIdentifiableAccess().getRule();
	}
	
	//Stereotype Stereotype:
	//	STRING
	public StereotypeElements getStereotypeAccess() {
		return pStereotype;
	}
	
	public ParserRule getStereotypeRule() {
		return getStereotypeAccess().getRule();
	}
	
	//ShortDescription ShortDescription:
	//	STRING
	public ShortDescriptionElements getShortDescriptionAccess() {
		return pShortDescription;
	}
	
	public ParserRule getShortDescriptionRule() {
		return getShortDescriptionAccess().getRule();
	}
	
	//Title:
	//	STRING;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum AssociationType:
	//	COMBINATION | FRAMING | SEQUENCE;
	public AssociationTypeElements getAssociationTypeAccess() {
		return eAssociationType;
	}
	
	public EnumRule getAssociationTypeRule() {
		return getAssociationTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
